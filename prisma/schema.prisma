// This is your Prisma schema file.
// It defines your database models and their relations.

// 1. Datasource and Generator Block
// Configures the database connection and the Prisma Client.
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


// 2. NextAuth.js Authentication Models
// These are required for the @auth/prisma-adapter to manage user authentication.

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  
  // Relations to other models
  accounts      Account[]
  sessions      Session[]
  orders        Order[] // A user can have many orders
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


// 3. Flash Sale Application Models
// These models are specific to our daily deals site.

model Product {
  id              String    @id @default(cuid())
  name            String    @unique
  description     String    @db.Text
  imageUrl        String
  
  // Pricing information
  originalPrice   Float
  salePrice       Float
  
  // Core flash sale mechanics
  stockQuantity   Int
  saleStartsAt    DateTime
  saleEndsAt      DateTime

  // Relation to the Order model
  orders          Order[] // A product can be part of many orders
}

model Order {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  productId       String
  product         Product  @relation(fields: [productId], references: [id])
  
  // Order details
  quantity        Int      @default(1)
  totalPrice      Float
  status          String   @default("COMPLETED") // e.g., COMPLETED, PENDING, FAILED
  
  createdAt       DateTime @default(now())

  // Adding an index on userId can speed up queries for a user's order history.
  @@index([userId])
}